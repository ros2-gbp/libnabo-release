include:
  - docker-compose.dependencies.yaml

services:

  # ====Pull-request related services==============================================================
  # ....Test logic related to libnabo install casses...............................................
  _integration_test:
    image: ${NBS_DOCKERHUB_NAMESPACE:?err}/libnabo-integration-test:${NBS_IMAGE_TAG:?err}
    pull_policy: build
    build:
      context: ..
      dockerfile: ${NBS_SUPERPROJECT_BUILD_SYSTEM_DIR:?err}/ubuntu/Dockerfile.libnabo.integration_test
      no_cache: true
      target: integration-test-compile-auto-path-resolution
      ## Mute 'platforms' while using arch virtualization with C++ build to prevent segmentation fault during nabo cmake install
#      platforms:
#        - "linux/amd64"
#        - "linux/arm64/v8"
      args:
        PROJECT_HUB: ${NBS_DOCKERHUB_NAMESPACE}
        BASE_IMAGE: libnabo-dependencies
        BASE_IMAGE_TAG: ${NBS_IMAGE_TAG}
        IS_TEAMCITY_RUN: ${IS_TEAMCITY_RUN}
        REPOSITORY_VERSION: 'latest'
        CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE:?err}
        INSTALL_SCRIPT_FLAG: '--build-system-CI-install'
    tty: true
    stdin_open: true
    init: true  # Propagate exit code (See remark in task NMO-266)
    depends_on:
      - dependencies
  integration_test_prefixed_path:
    extends: _integration_test
    build:
      target: integration-test-compile-prefixed-path
    depends_on:
      - _integration_test
  integration_test_auto_path_resolution:
    extends: _integration_test
    build:
      target: integration-test-compile-auto-path-resolution
    depends_on:
      - _integration_test

  # ....Test logic related to libnabo codebase unit-test...........................................
  ci_PR:
    image: ${NBS_DOCKERHUB_NAMESPACE:?err}/libnabo-ci-pr:${NBS_IMAGE_TAG:?err}
    pull_policy: build
    build:
      context: ..
      dockerfile: ${NBS_SUPERPROJECT_BUILD_SYSTEM_DIR}/ubuntu/Dockerfile.libnabo.ci_PR
      no_cache: true
      args:
        PROJECT_HUB: ${NBS_DOCKERHUB_NAMESPACE}
        BASE_IMAGE: libnabo-dependencies
        BASE_IMAGE_TAG: ${NBS_IMAGE_TAG}
        IS_TEAMCITY_RUN: ${IS_TEAMCITY_RUN}
        REPOSITORY_VERSION: 'latest'
        CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE:?err}
        INSTALL_SCRIPT_FLAG: '--build-system-CI-install --compile-test'
    tty: true
    stdin_open: true
    init: true  # Propagate exit code (See remark in task NMO-266)
    depends_on:
      - dependencies
  ci_PR_amd64:
    extends: ci_PR
    build:
      platforms:
        - "linux/amd64"
  ci_PR_arm64v8:
    extends: ci_PR
    build:
      platforms:
        - "linux/arm64/v8"

  # ====Dockerhub release image====================================================================
  release:
    image: ${NBS_DOCKERHUB_NAMESPACE:?err}/libnabo:${NBS_IMAGE_TAG:?err}
    container_name: libnabo
    build:
      context: ..
      dockerfile: ${NBS_SUPERPROJECT_BUILD_SYSTEM_DIR}/ubuntu/Dockerfile.libnabo.hub_release
      platforms:
        - "linux/amd64"
        - "linux/arm64/v8"
      no_cache: true
      args:
        PROJECT_HUB: ${NBS_DOCKERHUB_NAMESPACE}
        BASE_IMAGE: libnabo-dependencies-doc
        BASE_IMAGE_TAG: ${NBS_IMAGE_TAG}
        IS_TEAMCITY_RUN: ${IS_TEAMCITY_RUN}
        REPOSITORY_VERSION: ${REPOSITORY_VERSION:?err}
        CMAKE_BUILD_TYPE: 'Release'
        INSTALL_SCRIPT_FLAG: '--compile-test --generate-doc'
    tty: true
    stdin_open: true
    init: true  # Propagate exit code (See remark in task NMO-266)
    depends_on:
      - dependencies
      - dependencies-doc


